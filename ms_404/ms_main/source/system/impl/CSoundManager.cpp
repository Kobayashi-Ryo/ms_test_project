//=============================================================================
//
// サウンドマネージャー
// Author : Ryo Kobayashi
//
//=============================================================================

//*****************************************************************************
// インクルードファイル
//*****************************************************************************
#include "CSoundManager.h"
#include "SoundDef.h"
#include "CSubMix.h"
#include <common/DebugUtil.h>

//*****************************************************************************
// 名前空間
//*****************************************************************************
namespace
{
    static cs8* BGM_PATH =  "resource/BGM/";
    static cs8* SE_PATH =   "resource/SE/";
};

//=============================================================================
// コンストラクタ
//=============================================================================
CSoundManager::CSoundManager()
    : m_pXAudio2(nullptr)
    , m_pMasteringVoice(nullptr)
    , m_pBGM(nullptr)
    , m_pSE(nullptr)
{
}

//=============================================================================
// デストラクタ
//=============================================================================
CSoundManager::~CSoundManager()
{
    SafeRelease(m_pSE);
    SafeRelease(m_pBGM);

    ReleaseVoice(m_pMasteringVoice);
    
    // XAudio2オブジェクト開放
    SafeRelease(m_pXAudio2);

    // COMライブラリの終了処理
    CoUninitialize();
}

//=============================================================================
// 生成
//=============================================================================
CSoundManager* CSoundManager::Create()
{
    CSoundManager* pMgr = new CSoundManager();

    if(pMgr)
    {
        INIT_CHECK(pMgr->Init());
        _PrintConsole("サウンドマネージャー\n");
    }

    return pMgr;
}

//=============================================================================
// 開放
//=============================================================================
void CSoundManager::Release()
{
    delete this;
}

//=============================================================================
// BGM再生
//=============================================================================
void CSoundManager::PlayBGM(cs8* pName, bool bLoop)
{
    m_pBGM->Play(pName, bLoop);
}

//=============================================================================
// SE再生
//=============================================================================
void CSoundManager::PlaySE(cs8* pName, bool bLoop)
{
    m_pSE->Play(pName, bLoop);
}

//=============================================================================
// BGMを止める
//=============================================================================
void CSoundManager::StopBGM(cs8* pName)
{
    m_pBGM->Stop(pName);
}

//=============================================================================
// BGMを止める
//=============================================================================
void CSoundManager::StopBGM()
{
    m_pBGM->Stop();
}

//=============================================================================
// SEを止める
//=============================================================================
void CSoundManager::StopSE(cs8* pName)
{
    m_pSE->Stop(pName);
}

//=============================================================================
// SEを止める
//=============================================================================
void CSoundManager::StopSE()
{
    m_pSE->Stop();
}

//=============================================================================
// すべての音を止める
//=============================================================================
void CSoundManager::Stop()
{
    m_pBGM->Stop();
    m_pSE->Stop();
}

//=============================================================================
// BGMプリロード
//=============================================================================
void CSoundManager::LoadBGM(cs8* pName)
{
    m_pBGM->Load(pName);
}

//=============================================================================
// SEプリロード
//=============================================================================
void CSoundManager::LoadSE(cs8* pName)
{
    m_pSE->Load(pName);
}

//=============================================================================
// BGM音量設定
//=============================================================================
void CSoundManager::SetVolumeBGM(cs32 nVolume)
{
    m_pBGM->SetVolume(nVolume);
}

//=============================================================================
// SE音量設定
//=============================================================================
void CSoundManager::SetVolumeSE(cs32 nVolume)
{
    m_pSE->SetVolume(nVolume);
}

//=============================================================================
// BGM音量取得
//=============================================================================
s32 CSoundManager::GetVolumeBGM()
{
    return m_pBGM->GetVolumei();
}

//=============================================================================
// SE音量取得
//=============================================================================
s32 CSoundManager::GetVolumeSE()
{
    return m_pSE->GetVolumei();
}

//=============================================================================
// 初期化
//=============================================================================
HRESULT CSoundManager::Init()
{
    // COMライブラリ初期化
    CoInitializeEx(NULL, COINIT_MULTITHREADED);

    // XAudio2オブジェクト作成
    HRESULT hr = S_OK;
    hr = XAudio2Create(&m_pXAudio2, 0);
    _Assert(SUCCEEDED(hr));
    
    hr = m_pXAudio2->CreateMasteringVoice(&m_pMasteringVoice);
    _Assert(SUCCEEDED(hr));

    m_pBGM = CSubMix::Create(BGM_PATH, m_pXAudio2);
    _Assert(m_pBGM);
    m_pSE = CSubMix::Create(SE_PATH, m_pXAudio2);
    _Assert(m_pSE);

    return S_OK;
}

// EOF
