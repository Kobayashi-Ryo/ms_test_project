//=============================================================================
//
// ハードウェアタイマー
// Author : Ryo Kobayashi
//
//=============================================================================

//*****************************************************************************
// インクルードファイル
//*****************************************************************************
#include "CHardwareTimer.h"
#include <common/DebugUtil.h>

//=============================================================================
// コンストラクタ
//=============================================================================
CHardwareTimer::CHardwareTimer()
{
    timeBeginPeriod(1);
    m_uStart = m_uEnd = timeGetTime();
}

//=============================================================================
// デストラクタ
//=============================================================================
CHardwareTimer::~CHardwareTimer()
{
    timeEndPeriod(1);
}

//=============================================================================
// 生成
//=============================================================================
CHardwareTimer* CHardwareTimer::Create()
{
    CHardwareTimer* pTimer = new CHardwareTimer();
    _PrintConsole("ハードウェアタイマー\n");

    return pTimer;
}

//=============================================================================
// 開放
//=============================================================================
void CHardwareTimer::Release()
{
    delete this;
}

//=============================================================================
// 開始時刻設定
//=============================================================================
DWORD CHardwareTimer::Start()
{
    return (m_uStart = timeGetTime());
}

//=============================================================================
// 終了時刻設定
//=============================================================================
DWORD CHardwareTimer::End()
{
    return (m_uEnd = timeGetTime());
}

//=============================================================================
// 開始時刻と終了時刻と差分時間からスリープ
//=============================================================================
DWORD CHardwareTimer::Sleep(DWORD diff)
{
    DWORD uEndStartDiff = m_uEnd - m_uStart;
    if((int)uEndStartDiff < 0)
    {
        uEndStartDiff = 1;
    }

    DWORD uSleepTime = diff - uEndStartDiff;
    if((int)uSleepTime < 0)
    {
        uSleepTime = 1;
    }

    ::Sleep(uSleepTime);

    if(uEndStartDiff >= diff)
    {
        return uEndStartDiff;
    }

    return diff;
}

// EOF
